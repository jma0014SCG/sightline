name: Production Deployment Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      skip_tests:
        description: 'Skip tests (emergency deployments only)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20.x'
  PYTHON_VERSION: '3.11'
  PNPM_VERSION: '10.13.1'

jobs:
  # Job 1: Code quality and security checks
  quality-checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linting
        run: pnpm lint

      - name: Run type checking
        run: pnpm typecheck

      - name: Check formatting
        run: pnpm format:check

      - name: Security audit
        run: pnpm audit --production

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  # Job 2: Test suite
  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: quality-checks
    if: github.event.inputs.skip_tests != 'true'
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: sightline_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install Node dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Python dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Setup test environment
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/sightline_test
        run: |
          cp .env.example .env.test
          echo "DATABASE_URL=$DATABASE_URL" >> .env.test
          pnpm db:push

      - name: Run unit tests
        run: pnpm test:unit

      - name: Run integration tests
        run: pnpm test:integration

      - name: Run API tests
        run: |
          source venv/bin/activate
          cd api && python -m pytest

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Job 3: Build and bundle analysis
  build-analysis:
    name: Build & Bundle Analysis
    runs-on: ubuntu-latest
    needs: quality-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build production bundle
        env:
          NODE_ENV: production
        run: pnpm build:prod

      - name: Analyze bundle size
        run: |
          pnpm build:analyze || true
          du -sh .next

      - name: Check bundle size limits
        run: |
          BUNDLE_SIZE=$(du -sb .next | cut -f1)
          MAX_SIZE=52428800  # 50MB limit
          if [ $BUNDLE_SIZE -gt $MAX_SIZE ]; then
            echo "Bundle size ($BUNDLE_SIZE) exceeds limit ($MAX_SIZE)"
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            .next
            public
            package.json
            pnpm-lock.yaml

  # Job 4: Database migrations
  database-migration:
    name: Database Migration
    runs-on: ubuntu-latest
    needs: [test-suite, build-analysis]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run database migrations
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          pnpm db:generate
          pnpm db:push

      - name: Verify database state
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: node scripts/validate-database.js

  # Job 5: Deploy backend to Railway
  deploy-backend:
    name: Deploy Backend (Railway)
    runs-on: ubuntu-latest
    needs: [test-suite, build-analysis]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          cd api
          railway up --service sightline-api

      - name: Verify backend deployment
        run: |
          sleep 30
          curl -f https://sightline-api-production.up.railway.app/api/health || exit 1

  # Job 6: Deploy frontend to Vercel
  deploy-frontend:
    name: Deploy Frontend (Vercel)
    runs-on: ubuntu-latest
    needs: [test-suite, build-analysis, database-migration, deploy-backend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_TEAM_ID }}

  # Job 7: Post-deployment verification
  verify-deployment:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-frontend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          npm install -g @playwright/test
          npx playwright install chromium

      - name: Run production verification
        env:
          NEXT_PUBLIC_APP_URL: https://sightlineai.io
          NEXT_PUBLIC_BACKEND_URL: https://sightline-api-production.up.railway.app
        run: node scripts/verify-production.js

      - name: Run E2E smoke tests
        run: |
          npx playwright test tests/smoke --reporter=github

      - name: Check Lighthouse scores
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://sightlineai.io
            https://sightlineai.io/library
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Job 8: Notify deployment status
  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [verify-deployment]
    if: always()
    steps:
      - name: Send Slack notification
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          STATUS="${{ needs.verify-deployment.result }}"
          COLOR="good"
          EMOJI="✅"
          if [ "$STATUS" != "success" ]; then
            COLOR="danger"
            EMOJI="❌"
          fi
          
          curl -X POST $SLACK_WEBHOOK_URL \
            -H 'Content-Type: application/json' \
            -d "{
              \"attachments\": [{
                \"color\": \"$COLOR\",
                \"title\": \"$EMOJI Deployment Status: $STATUS\",
                \"text\": \"Deployment to production completed with status: $STATUS\",
                \"fields\": [
                  {\"title\": \"Branch\", \"value\": \"${{ github.ref_name }}\", \"short\": true},
                  {\"title\": \"Commit\", \"value\": \"${{ github.sha }}\", \"short\": true},
                  {\"title\": \"Author\", \"value\": \"${{ github.actor }}\", \"short\": true},
                  {\"title\": \"Workflow\", \"value\": \"${{ github.workflow }}\", \"short\": true}
                ]
              }]
            }"

      - name: Create GitHub deployment
        uses: chrnorm/deployment-action@v2
        with:
          token: ${{ github.token }}
          environment-url: https://sightlineai.io
          environment: production
          description: 'Production deployment'
          state: ${{ needs.verify-deployment.result }}

  # Job 9: Rollback on failure
  rollback-on-failure:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [verify-deployment]
    if: failure() && github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Rollback Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          npm install -g vercel
          vercel rollback --token=$VERCEL_TOKEN --scope=${{ secrets.VERCEL_TEAM_ID }}

      - name: Rollback Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          npm install -g @railway/cli
          cd api
          railway down
          railway up --rollback

      - name: Send rollback notification
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST $SLACK_WEBHOOK_URL \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "🔄 Automatic rollback initiated due to deployment failure",
              "attachments": [{
                "color": "warning",
                "title": "Rollback in Progress",
                "text": "Previous deployment is being restored"
              }]
            }'