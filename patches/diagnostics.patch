diff --git a/src/app/dev/diagnostics/page.tsx b/src/app/dev/diagnostics/page.tsx
new file mode 100644
index 0000000..1234567
--- /dev/null
+++ b/src/app/dev/diagnostics/page.tsx
@@ -0,0 +1,280 @@
+'use client'
+
+import { useState, useEffect } from 'react'
+import { api } from '@/lib/trpc/client'
+
+// Environment check - this page only works in development
+const isDevelopment = process.env.NODE_ENV !== 'production'
+
+interface EnvStatus {
+  DATABASE_URL: boolean
+  NEXT_PUBLIC_APP_URL: string | undefined
+  CLERK_SECRET_KEY: boolean
+  NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: boolean
+  CLERK_WEBHOOK_SECRET: boolean
+  OPENAI_API_KEY: boolean
+  STRIPE_SECRET_KEY: boolean
+  STRIPE_WEBHOOK_SECRET: boolean
+  YOUTUBE_API_KEY: boolean
+  GUMLOOP_API_KEY: boolean
+  OXYLABS_USERNAME: boolean
+  OXYLABS_PASSWORD: boolean
+  NODE_ENV: string | undefined
+}
+
+interface DiagnosticResult {
+  success: boolean
+  message: string
+  details?: any
+}
+
+export default function DiagnosticsPage() {
+  const [envStatus, setEnvStatus] = useState<EnvStatus | null>(null)
+  const [prismaStatus, setPrismaStatus] = useState<DiagnosticResult | null>(null)
+  const [summaryTestResult, setSummaryTestResult] = useState<DiagnosticResult | null>(null)
+  const [isTestingSummary, setIsTestingSummary] = useState(false)
+  const [isPrismaLoading, setIsPrismaLoading] = useState(false)
+
+  // Block access in production
+  if (!isDevelopment) {
+    return (
+      <div className="min-h-screen bg-gray-950 text-white flex items-center justify-center">
+        <div className="text-center">
+          <h1 className="text-3xl font-bold mb-4">Access Denied</h1>
+          <p className="text-gray-400">This page is only available in development mode.</p>
+        </div>
+      </div>
+    )
+  }
+
+  useEffect(() => {
+    // Get environment status (client-side only)
+    const status: EnvStatus = {
+      DATABASE_URL: false, // Can't check server env from client
+      NEXT_PUBLIC_APP_URL: process.env.NEXT_PUBLIC_APP_URL,
+      CLERK_SECRET_KEY: false, // Can't check server env from client
+      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: !!process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY,
+      CLERK_WEBHOOK_SECRET: false, // Can't check server env from client
+      OPENAI_API_KEY: false, // Can't check server env from client
+      STRIPE_SECRET_KEY: false, // Can't check server env from client
+      STRIPE_WEBHOOK_SECRET: false, // Can't check server env from client
+      YOUTUBE_API_KEY: false, // Can't check server env from client
+      GUMLOOP_API_KEY: false, // Can't check server env from client
+      OXYLABS_USERNAME: false, // Can't check server env from client
+      OXYLABS_PASSWORD: false, // Can't check server env from client
+      NODE_ENV: process.env.NODE_ENV,
+    }
+    setEnvStatus(status)
+  }, [])
+
+  const testPrismaConnection = async () => {
+    setIsPrismaLoading(true)
+    setPrismaStatus(null)
+    
+    try {
+      // Make a simple API call that uses Prisma
+      const response = await fetch('/api/health')
+      const data = await response.json()
+      
+      if (data.database?.status === 'up') {
+        setPrismaStatus({
+          success: true,
+          message: 'Prisma connection successful',
+          details: {
+            database: data.database,
+            timestamp: new Date().toISOString()
+          }
+        })
+      } else {
+        setPrismaStatus({
+          success: false,
+          message: 'Prisma connection failed',
+          details: data.database || { error: 'Unknown error' }
+        })
+      }
+    } catch (error) {
+      setPrismaStatus({
+        success: false,
+        message: 'Failed to test Prisma connection',
+        details: { error: error instanceof Error ? error.message : 'Unknown error' }
+      })
+    } finally {
+      setIsPrismaLoading(false)
+    }
+  }
+
+  const testSummaryCreation = async () => {
+    setIsTestingSummary(true)
+    setSummaryTestResult(null)
+
+    // Hardcoded test URL - a short video for quick testing
+    const testUrl = 'https://www.youtube.com/watch?v=dQw4w9WgXcQ'
+    
+    try {
+      // Test anonymous summary creation
+      const result = await api.summary.createAnonymous.mutate({
+        url: testUrl,
+        browserFingerprint: `test-fingerprint-${Date.now()}`
+      })
+
+      setSummaryTestResult({
+        success: true,
+        message: 'Summary creation initiated successfully',
+        details: {
+          summaryId: result.summaryId,
+          taskId: result.taskId,
+          videoId: result.videoId,
+          status: result.status,
+          timestamp: new Date().toISOString()
+        }
+      })
+    } catch (error) {
+      setSummaryTestResult({
+        success: false,
+        message: 'Summary creation failed',
+        details: {
+          error: error instanceof Error ? error.message : 'Unknown error',
+          timestamp: new Date().toISOString()
+        }
+      })
+    } finally {
+      setIsTestingSummary(false)
+    }
+  }
+
+  const maskSecret = (value: string | undefined): string => {
+    if (!value) return '❌ Not Set'
+    if (value.length <= 8) return '✅ Set'
+    return `✅ ${value.substring(0, 4)}...${value.substring(value.length - 4)}`
+  }
+
+  return (
+    <div className="min-h-screen bg-gray-950 text-white p-8">
+      <div className="max-w-6xl mx-auto">
+        <div className="mb-8">
+          <h1 className="text-4xl font-bold mb-2">Development Diagnostics</h1>
+          <p className="text-gray-400">Environment status and connection tests</p>
+          <div className="mt-2 text-sm text-yellow-500">
+            ⚠️ This page is only visible in development mode
+          </div>
+        </div>
+
+        {/* Environment Variables */}
+        <div className="bg-gray-900 rounded-lg p-6 mb-6">
+          <h2 className="text-2xl font-semibold mb-4">Environment Variables</h2>
+          {envStatus ? (
+            <div className="space-y-2 font-mono text-sm">
+              <div className="flex justify-between">
+                <span className="text-gray-400">NODE_ENV:</span>
+                <span className="text-green-400">{envStatus.NODE_ENV}</span>
+              </div>
+              <div className="flex justify-between">
+                <span className="text-gray-400">NEXT_PUBLIC_APP_URL:</span>
+                <span className={envStatus.NEXT_PUBLIC_APP_URL ? 'text-green-400' : 'text-red-400'}>
+                  {envStatus.NEXT_PUBLIC_APP_URL || '❌ Not Set'}
+                </span>
+              </div>
+              <div className="flex justify-between">
+                <span className="text-gray-400">NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY:</span>
+                <span className={envStatus.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY ? 'text-green-400' : 'text-red-400'}>
+                  {envStatus.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY ? '✅ Present' : '❌ Missing'}
+                </span>
+              </div>
+              <div className="mt-4 pt-4 border-t border-gray-800">
+                <p className="text-xs text-gray-500 mb-2">
+                  Note: Server-side environment variables cannot be checked from client components.
+                  Use the Prisma test below to verify database connectivity.
+                </p>
+                <div className="text-xs text-gray-600 space-y-1">
+                  <div>• DATABASE_URL (server-only)</div>
+                  <div>• CLERK_SECRET_KEY (server-only)</div>
+                  <div>• OPENAI_API_KEY (server-only)</div>
+                  <div>• STRIPE_SECRET_KEY (server-only)</div>
+                  <div>• Other API keys (server-only)</div>
+                </div>
+              </div>
+            </div>
+          ) : (
+            <div className="text-gray-500">Loading environment status...</div>
+          )}
+        </div>
+
+        {/* Prisma Connection Test */}
+        <div className="bg-gray-900 rounded-lg p-6 mb-6">
+          <h2 className="text-2xl font-semibold mb-4">Database Connection (Prisma)</h2>
+          <button
+            onClick={testPrismaConnection}
+            disabled={isPrismaLoading}
+            className="bg-blue-600 hover:bg-blue-700 disabled:bg-gray-700 text-white px-4 py-2 rounded-lg transition-colors"
+          >
+            {isPrismaLoading ? 'Testing...' : 'Test Prisma Connection'}
+          </button>
+          
+          {prismaStatus && (
+            <div className={`mt-4 p-4 rounded-lg ${prismaStatus.success ? 'bg-green-900/20 border border-green-800' : 'bg-red-900/20 border border-red-800'}`}>
+              <div className="flex items-center mb-2">
+                <span className={`text-lg mr-2 ${prismaStatus.success ? 'text-green-400' : 'text-red-400'}`}>
+                  {prismaStatus.success ? '✅' : '❌'}
+                </span>
+                <span className="font-semibold">{prismaStatus.message}</span>
+              </div>
+              {prismaStatus.details && (
+                <pre className="text-xs text-gray-400 overflow-x-auto">
+                  {JSON.stringify(prismaStatus.details, null, 2)}
+                </pre>
+              )}
+            </div>
+          )}
+        </div>
+
+        {/* Summary Creation Test */}
+        <div className="bg-gray-900 rounded-lg p-6 mb-6">
+          <h2 className="text-2xl font-semibold mb-4">Summary Creation Test</h2>
+          <p className="text-gray-400 mb-4 text-sm">
+            Tests anonymous summary creation with a hardcoded YouTube URL.
+            This will create a real summary task (using Rick Astley - Never Gonna Give You Up).
+          </p>
+          <button
+            onClick={testSummaryCreation}
+            disabled={isTestingSummary}
+            className="bg-purple-600 hover:bg-purple-700 disabled:bg-gray-700 text-white px-4 py-2 rounded-lg transition-colors"
+          >
+            {isTestingSummary ? 'Creating Summary...' : 'Test Summary Creation'}
+          </button>
+          
+          {summaryTestResult && (
+            <div className={`mt-4 p-4 rounded-lg ${summaryTestResult.success ? 'bg-green-900/20 border border-green-800' : 'bg-red-900/20 border border-red-800'}`}>
+              <div className="flex items-center mb-2">
+                <span className={`text-lg mr-2 ${summaryTestResult.success ? 'text-green-400' : 'text-red-400'}`}>
+                  {summaryTestResult.success ? '✅' : '❌'}
+                </span>
+                <span className="font-semibold">{summaryTestResult.message}</span>
+              </div>
+              {summaryTestResult.details && (
+                <div className="mt-2">
+                  <pre className="text-xs text-gray-400 overflow-x-auto bg-gray-950 p-2 rounded">
+                    {JSON.stringify(summaryTestResult.details, null, 2)}
+                  </pre>
+                  {summaryTestResult.success && summaryTestResult.details.summaryId && (
+                    <div className="mt-2">
+                      <a
+                        href={`/library/${summaryTestResult.details.summaryId}`}
+                        target="_blank"
+                        rel="noopener noreferrer"
+                        className="text-blue-400 hover:text-blue-300 text-sm underline"
+                      >
+                        View Summary →
+                      </a>
+                    </div>
+                  )}
+                </div>
+              )}
+            </div>
+          )}
+        </div>
+
+        {/* Quick Links */}
+        <div className="bg-gray-900 rounded-lg p-6">
+          <h2 className="text-2xl font-semibold mb-4">Quick Links</h2>
+          <div className="grid grid-cols-2 gap-4">
+            <a href="/api/health" target="_blank" className="text-blue-400 hover:text-blue-300 underline">
+              /api/health - Health Check Endpoint
+            </a>
+            <a href="/api/progress/test" target="_blank" className="text-blue-400 hover:text-blue-300 underline">
+              /api/progress/test - Progress API Test
+            </a>
+            <a href="http://localhost:8000/docs" target="_blank" className="text-blue-400 hover:text-blue-300 underline">
+              FastAPI Docs (if backend running)
+            </a>
+            <a href="http://localhost:5555" target="_blank" className="text-blue-400 hover:text-blue-300 underline">
+              Prisma Studio (run: pnpm db:studio)
+            </a>
+          </div>
+        </div>
+      </div>
+    </div>
+  )
+}