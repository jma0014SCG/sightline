generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String       @id
  email                  String       @unique
  name                   String?
  image                  String?
  role                   Role         @default(USER)
  plan                   Plan         @default(FREE)
  emailVerified          DateTime?
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  stripeCustomerId       String?      @unique
  stripeSubscriptionId   String?      @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
  summariesUsed          Int          @default(0)
  summariesLimit         Int          @default(3)
  version                Int          @default(0) // For optimistic locking
  sharedLinks            ShareLink[]
  summaries              Summary[]
  usageEvents            UsageEvent[]

  @@index([plan], map: "idx_user_plan")
}

model Summary {
  id                  String      @id @default(cuid())
  userId              String?     // Made nullable for anonymous summaries
  videoId             String
  videoUrl            String
  videoTitle          String
  channelName         String
  channelId           String
  duration            Int
  thumbnailUrl        String?
  content             String
  keyPoints           Json?
  metadata            Json?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  commentCount        Int?
  description         String?
  likeCount           Int?
  uploadDate          DateTime?
  viewCount           Int?
  debunkedAssumptions Json?
  enrichment          Json?
  frameworks          Json?
  inPractice          Json?
  isFavorite          Boolean     @default(false)
  keyMoments          Json?
  language            String      @default("en")
  lastViewedAt        DateTime?
  learningPack        Json?
  playbooks           Json?
  processingSource    String?
  processingVersion   String?
  rating              Int?
  speakers            String[]    @default([])
  synopsis            String?
  thinkingStyle       Json?
  userNotes           String?
  sharedLinks         ShareLink[]
  user                User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories          Category[]  @relation("SummaryCategories")
  tags                Tag[]       @relation("SummaryTags")

  @@unique([userId, videoId])
  @@index([userId])
  @@index([videoId])
  @@index([viewCount])
  @@index([uploadDate])
  @@index([userId, viewCount])
  @@index([userId, uploadDate])
  @@index([userId, isFavorite])
  @@index([userId, rating])
  @@index([processingSource])
  @@index([userId, processingSource])
  @@index([createdAt(sort: Desc)], map: "idx_summary_created")
  @@index([userId], map: "idx_summary_user")
  @@index([userId, createdAt(sort: Desc)], map: "idx_summary_user_created")
  @@index([userId, createdAt], map: "idx_summary_user_date_range")
}

model ShareLink {
  id        String    @id @default(cuid())
  slug      String    @unique
  summaryId String
  userId    String
  isPublic  Boolean   @default(false)
  expiresAt DateTime?
  views     Int       @default(0)
  createdAt DateTime  @default(now())
  summary   Summary   @relation(fields: [summaryId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([slug])
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  summaries Summary[] @relation("SummaryCategories")
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  type      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  summaries Summary[] @relation("SummaryTags")

  @@index([type])
}

model Progress {
  taskId    String   @id @map("task_id")
  data      Json
  createdAt DateTime @default(now()) @map("created_at")
  expiresAt DateTime @map("expires_at")

  @@index([expiresAt])
  @@index([expiresAt], map: "idx_progress_expires")
  @@map("progress")
}

model UsageEvent {
  id        String   @id @default(cuid())
  userId    String
  eventType String
  summaryId String?
  videoId   String?
  metadata  Json?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([eventType])
  @@index([userId, eventType])
  @@index([createdAt])
  @@index([userId, eventType, createdAt])
}

model Lock {
  id         String   @id @default(uuid())
  key        String   @unique
  expiresAt  DateTime
  acquiredAt DateTime @default(now())
  
  @@index([key, expiresAt])
  @@index([expiresAt])
}

model WebhookQueue {
  id           String    @id
  payload      Json
  attempts     Int       @default(0)
  maxAttempts  Int       @default(5)
  status       String    @default("pending")
  error        String?
  nextRetryAt  DateTime?
  createdAt    DateTime  @default(now())
  processedAt  DateTime?
  completedAt  DateTime?
  failedAt     DateTime?
  
  @@index([status, nextRetryAt])
  @@index([createdAt])
}

enum Role {
  USER
  ADMIN
}

enum Plan {
  FREE
  PRO
  ENTERPRISE
}
